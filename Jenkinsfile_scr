node {
    def app

    stage('Clone repository') {
        /* Let's make sure we have the repository cloned to our workspace */

        checkout scm

    }


    stage('Build Jar') {
        /* This builds the actual image; synonymous to
         * docker build on the command line */

        sh 'mvn -B -Dskip.surefire.tests clean package'

    }

    stage('Build image') {
        /* This builds the actual image; synonymous to
         * docker build on the command line */

        app = docker.build("eicke74/travelmanager:latest")

    }
    stage('Unit test') {
        /* Ideally, we would run a test framework against our image.
         * For this example, we're using a Volkswagen-type approach ;-) */
         try {
           app.inside {
           sh 'mvn test'
           }
         } finally {
          junit 'target/surefire-reports/*.xml'
         }
    }
    stage('Integration test') {
        /* Ideally, we would run a test framework against our image.
         * For this example, we're using a Volkswagen-type approach ;-) */
         try {
          app.inside {
              sh 'mvn verify -Dskip.surefire.tests -e'
          }
        } finally {
          junit 'target/failsafe-reports/*.xml'
        }
    }

    stage('Push image') {
        /* Finally, we'll push the image with two tags:
         * First, the incremental build number from Jenkins
         * Second, the 'latest' tag.
         * Pushing multiple tags is cheap, as all the layers are reused. */

         docker.withRegistry('https://localhost:5000') {
            app.push("${env.BUILD_NUMBER}")
            app.push("latest")
        }
    }
}
